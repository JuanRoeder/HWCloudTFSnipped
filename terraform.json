{
	//Configuración inicial
	"Instanciar módulo HWCloudTFLib":{
		"prefix": "tf-modHWCloudTFLib",
		"body": [
			"module \"HWCloudTFLib\" {",
			"\tsource = \"git::https://github.com/JuanRoeder/HWCloudTFLib.git?ref=v1.6.0\"",				
			"}",
			"",
			"locals {",
			"\tenum_regions = module.HWCloudTFLib.enum_regions",
			"\tenum_commons = module.HWCloudTFLib.enum_commons",
			"\tenum_ecs = module.HWCloudTFLib.enum_ecs",
			"\tenum_evs = module.HWCloudTFLib.enum_evs",
			"\tenum_ims = module.HWCloudTFLib.enum_ims",
			"\tenum_vpc = module.HWCloudTFLib.enum_vpc",
			"\tenum_eip = module.HWCloudTFLib.enum_eip",
			"\tenum_vpn = module.HWCloudTFLib.enum_vpn",
			"}"
		],
		"description": "Snippet para instanciar el módulo HWCloudTFLib desde el GIT"
	},
	"Instanciar variables.tf":{
		"prefix": "tf-variables",
		"description": "Snippet para instanciar las variables en el archivo variables.tf",
		"body": [
			"variable \"HWCLOUD_SK\" {",
			"\tdescription = \"Secret-key\"",
			"\ttype = string",
			"\tsensitive = true",
			"}",
			"",
			"variable \"HWCLOUD_AK\" {",
			"\tdescription = \"Access-key\"",
			"\ttype = string",
			"\tsensitive = true",
			"}",
			"",
			"variable \"HWCLOUD_REGION\" {",
			"\tdescription = \"Region\"",
			"\ttype = string",
			"\tdefault = \"\"",
			"}",
			"",
			"variable \"HWCLOUD_PROJECTID\" {",
			"\tdescription = \"Project ID\"",
			"\ttype = string",
			"\tdefault = \"\"",
			"}"
		]
	},
	"Instanciar proveedor Huawei Cloud para Terraform":{
		"prefix": "tf-required_providers",
		"body": [
			"terraform {",
			"\trequired_providers {",
			"\t\thuaweicloud = {",
			"\t\t\tsource  = \"huaweicloud/huaweicloud\"",
			"\t\t\tversion = \">= 1.36.0\"",
			"\t\t}",
			"\t}",
			"\trequired_version = \">= 0.13\"",
			"}"
		],
		"description": "Snippet para instanciar el tipo de proveedor de Huawei Cloud para Terraform"
	},
	"Instanciar credenciales del proveedor Huawei Cloud":{
		"prefix": "tf-provider hwcloud",
		"body": [
			"provider \"huaweicloud\" {",
			"\tregion = ${1:region}",
			"\taccess_key = \"${var.HWCLOUD_AK}\"",
			"\tsecret_key = \"${var.HWCLOUD_SK}\"",
			"}"
		]
	},
	//Enterprise project
	"Consulta data Enterprise Project":{
		"prefix": "tf-data-eproject",
		"body": [
			"data \"huaweicloud_enterprise_project\" \"$enterprise_project\"{",
			"\tname = \"$name\"",
			"}"
		]
	},
	//IMS
	"Consulta data IMS":{
		"prefix": "tf-data-image-windows",
		"body": [
			"data \"huaweicloud_images_image\" \"$windows\" {",
			"\tmost_recent  = true",
			"\tarchitecture = local.enum_ims.architecture.x86",
			"\tos           = local.enum_ims.os_type.windows.name",
			"\tvisibility   = local.enum_ims.visibility.Public",
			"\timage_type   = local.enum_ims.image_type.ECS",
			"\tname         = local.enum_ims.os_type.windows.$Enum_Image_Name",
			"}"
		]
	},
	//ECS
	"Instanciar ECS resource":{
		"prefix": "tf-ecs-resource",
		"body": [
			"resource \"huaweicloud_compute_instance\" \"$nombre\" {",
			"\tenterprise_project_id = $enterprise_project_id",
			"\tname               = $name",
			"\timage_id           = $image_id",
			"\tflavor_id          = $flavor_id",
			"\tsecurity_group_ids = $security_group_ids",
			"\tavailability_zone  = $availability_zone",
			"", 
			"\tsystem_disk_type = $type",
			"\tsystem_disk_size = $size",
			"",  
			"\tdynamic \"data_disks\" {",
			"\t\tfor_each = [{",
			"\t\t\ttype = $type",
			"\t\t\tsize = $size",
			"\t\t}]",
			"\t\tcontent {",
			"\t\t\ttype = data_disks.value.type",
			"\t\t\tsize = data_disks.value.size",
			"\t\t}",
			"\t}",
			"",  
			"\tdynamic \"network\" {",
			"\t\tfor_each = [{",
			"\t\t\tuuid = $uuid",
			"\t\t}]",
			"\t\tcontent {",
			"\t\t\tuuid = network.value.uuid",
			"\t\t}",
			"\t}",
			"}",
		]
	},
	"Instanciar user_data win block":{
		"prefix": "tf-ecs-user-data",
		"body": [
			"user_data = base64encode(file(\"$init_disk.ps1\"))"
		]
	},
	"Instanciar user_data linux block":{
		"prefix": "tf-ecs-user-data-linux",
		"body": [
			"user_data = base64encode(file(\"$cloud_init_script.yaml\"))"
		]
	},
	//EVS
	"Instanciar evs resource":{
		"prefix": "tf-evs-resource",
		"body": [
			"resource \"huaweicloud_evs_volume\" \"$volumeName\" {",
			"\tname              = \"$volumeName\"",
			"\tvolume_type       = local.enum_evs.type.$Enum_type",
			"\tsize              = $size",
			"\tavailability_zone = $availability_zone",
			"\tserver_id         = $server_id_to_attach",
			"}"
		]
	},
	//EIP
	"Instanciar EIP resource":{
		"prefix": "tf-eip-resource",
		"body": [
			"resource \"huaweicloud_vpc_eip\" \"$eip_name\" {",
			"\tpublicip {",
			"\t\ttype = local.enum_eip.type.$Enum_type",
			"\t}",
			"",
			"\tbandwidth {",
			"\t\tshare_type  = local.enum_eip.share_type.$Enum_type",
			"\t\tname        = $bandwidth_name",
			"\t\tsize        = $size",
			"\t\tcharge_mode = local.enum_eip.charge_mode.$Enum_type",
			"\t}",
			"}",
		]
	},
	"Instanciar recurso de asociacion EIP con ECS":{
		"prefix": "tf-eip-associate",
		"body": [
			"resource \"huaweicloud_compute_eip_associate\" \"$name\" {",
			"\tpublic_ip   = \"$address_ip\"",
			"\tinstance_id = \"$ecs_id\"",
			"}"
		]
	},
	//VPC
	"Instanciar VPC resource":{
		"prefix": "tf-vpc-resource",
		"body": [
			"resource \"huaweicloud_vpc\" \"$vpc_name\" {",
			"\tname = $name",
			"\tcidr = $cidr",
			"}"
		]
	},
	"Instanciar Subnet resource":{
		"prefix": "tf-subnet-resource",
		"body": [
			"resource \"huaweicloud_vpc_subnet\" \"$subnet_name\" {",
			"\tname              = $subnet_name",
			"\tcidr              = $subnet_cidr",
			"\tgateway_ip        = $subnet_gateway_ip",
			"\tvpc_id            = $vpc_id",
			"\tavailability_zone = $availability_zone",
			"}",
		]
	},
	"Instanciar Peering resource":{
		"prefix": "tf-vpc-peering",
		"body": [
			"resource \"huaweicloud_vpc_peering_connection\" \"$peering\" {",
			"\tprovider    = \"huaweicloud.$mainAlias\" //eliminar si el peering es con una VPC del mismo Tenant",
			"\tname        = $peer_conn_name",
			"\tvpc_id      = $vpc_id",
			"\tpeer_vpc_id = $accepter_vpc_id",
			"}"
		]
	},
	"Instanciar Peering resource accepter":{
		"prefix": "tf-vpc-peering-accepter",
		"body": [
			"resource \"huaweicloud_vpc_peering_connection_accepter\" \"$accepter\" {",
			"\tprovider                  = \"huaweicloud.$peerAlias\"",
			"\taccept                    = true",
			"\tvpc_peering_connection_id = huaweicloud_vpc_peering_connection.$peering.id",
			"}"
		]
	},
	"Instanciar Ruta resource":{
		"prefix": "tf-route-resource",
		"body": [
			"resource \"huaweicloud_vpc_route\" \"$vpc_route\" {",
			"\tvpc_id      = $vpc_id",
			"\tdestination = $cdir_destination",
			"\ttype        = $type",
			"\tnexthop     = $nexthop",
			"}"
		]
	},
	//VPN
	"Instanciar VPN Gateway resource":{
		"prefix": "tf-vpn-gateway",
		"body": [
			"data \"huaweicloud_vpn_gateway_availability_zones\" \"$vpnName\" {",
			"\tflavor          = local.enum_vpn.flavor.Professional1",
			"\tattachment_type = local.enum_vpn.attachment_type.VPC",
			"}",
			"",
			"resource \"huaweicloud_vpn_gateway\" \"$vpnName\" {",
			"\tenterprise_project_id = $name",
			"\tname                  = $name",
			"\tflavor                = local.enum_vpn.flavor.Professional1",
			"\tattachment_type       = local.enum_vpn.attachment_type.VPC",
			"\tvpc_id                = $vpc_id",
			"\tlocal_subnets         = [\"cidr_block_1\", \"cidr_block_2\"]",
			"\tconnect_subnet        = $subnet_id",
			"\tasn                   = 64512 //64,512 by default. Use 1 to 4,294,967,295",
			"\tha_mode               = local.enum_vpn_ha_mode.Active-Standby",
			"\tavailability_zones    = [",
			"\t\tdata.huaweicloud_vpn_gateway_availability_zones.$vpnName.names[0],",
			"\t\tdata.huaweicloud_vpn_gateway_availability_zones.$vpnName.names[1]",
			"\t]",
			"",
			"\teip1 {",
			"\t\tid                 = $eip1_id //eliminar en caso de crear nueva",
			"\t\t//Eliminar lo demás si ya exite la EIP",
			"\t\tbandwidth_name     = $bandwidth_name1",
			"\t\ttype               = local.enum_eip.type.dynamic-BGP",
			"\t\tbandwidth_size     = $size",
			"\t\tcharge_mode        = local.enum_eip.charge_mode.Traffic",
			"\t}",
			"",
			"\teip2 {",
			"\t\tid                 = $eip2_id //eliminar en caso de crear nueva",
			"\t\t//Eliminar lo demás si ya exite la EIP",
			"\t\tbandwidth_name     = $bandwidth_name2",
			"\t\ttype               = local.enum_eip.type.dynamic-BGP",
			"\t\tbandwidth_size     = $size",
			"\t\tcharge_mode        = local.enum_eip.charge_mode.Traffic",
			"\t}",
			"}"
		]
	},
	"Instanciar VPN Customer Gateway resource":{
		"prefix": "tf-vpn-cust-gw-resource",
		"body": [
			"resource \"huaweicloud_vpn_customer_gateway\" \"$custGwName\" {",
			"\tname     = $name",
			"\tid_value = \"$id_value\" //IP o FQDN",
			"\tid_type = loca.enum_vpn.customer_id_type.IP",
			"}"
		]
	},
	"Instanciar VPN Connection static resource":{
		"prefix": "tf-vpn-connection-static-resource",
		"body": [
			"resource \"huaweicloud_vpn_connection\" \"$vpnConnName\" {",
			"\tname                = $name",
			"\tgateway_id          = $gateway_id",
			"\tgateway_ip          = $gateway_ip",
			"\tcustomer_gateway_id = $customer_gateway_id",
			"\tpeer_subnets        = [$cidr_peer_subnet]",
			"\tvpn_type            = local.enum_vpn.connection_type.Static-Routing",
			"\tpsk                 = \"$psk\"",
			"",
			"\tikepolicy {",
			"\t\tauthentication_algorithm = local.enum_vpn.authentication_algorithm.sha2-256",
			"\t\tauthentication_method    = local.enum_vpn.authentication_method.pre-share",
			"\t\tencryption_algorithm     = local.enum_vpn.encryption_algorithm.aes-128",
			"\t\tike_version              = local.enum_vpn.ike_version.v2",
			"\t\tlifetime_seconds         = 86400",
			"\t\tdh_group                 = local.enum_vpn.dh_group.group15",
			"\t}",
			"",
			"\tipsecpolicy {",
			"\t\tauthentication_algorithm = local.enum_vpn.authentication_algorithm.sha2-256",
			"\t\tencapsulation_mode       = local.enum_vpn.encapsulation_mode.tunnel",
			"\t\tencryption_algorithm     = local.enum_vpn.encryption_algorithm.aes-128",
			"\t\tlifetime_seconds         = 3600",
			"\t\tpfs                      = local.enum_vpn.pfs.group14",
			"\t\ttransform_protocol       = local.enum_vpn.transform_protocol.esp",
			"\t}",
			"}",
		]
	},
	"Instanciar VPN Connection bgp resource":{
		"prefix": "tf-vpn-connection-bgp-resource",
		"body": [
			"resource \"huaweicloud_vpn_connection\" \"$vpnConnName\" {",
			"\tname                = $name",
			"\tgateway_id          = $gateway_id",
			"\tgateway_ip          = $gateway_ip",
			"\tcustomer_gateway_id = $customer_gateway_id",
			"\tpeer_subnets        = [$cidr_peer_subnet]",
			"\tvpn_type            = local.enum_vpn.connection_type.BGP-Routing",
			"\ttunnel_local_address= 169.254.$pair.$addr1",
			"\ttunnel_peer_address = 169.256.$pair.$addr2",
			"\tpsk                 = \"$psk\"",
			"",
			"\tikepolicy {",
			"\t\tauthentication_algorithm = local.enum_vpn.authentication_algorithm.sha2-256",
			"\t\tauthentication_method    = local.enum_vpn.authentication_method.pre-share",
			"\t\tencryption_algorithm     = local.enum_vpn.encryption_algorithm.aes-128",
			"\t\tike_version              = local.enum_vpn.ike_version.v2",
			"\t\tlifetime_seconds         = 86400",
			"\t\tdh_group                 = local.enum_vpn.dh_group.group15",
			"\t}",
			"",
			"\tipsecpolicy {",
			"\t\tauthentication_algorithm = local.enum_vpn.authentication_algorithm.sha2-256",
			"\t\tencapsulation_mode       = local.enum_vpn.encapsulation_mode.tunnel",
			"\t\tencryption_algorithm     = local.enum_vpn.encryption_algorithm.aes-128",
			"\t\tlifetime_seconds         = 3600",
			"\t\tpfs                      = local.enum_vpn.pfs.group14",
			"\t\ttransform_protocol       = local.enum_vpn.transform_protocol.esp",
			"\t}",
			"}",
		]
	},
	"Instanciar VPN Connection policy resource":{
		"prefix": "tf-vpn-connection-policy-resource",
		"body": [
			"resource \"huaweicloud_vpn_connection\" \"$vpnConnName\" {",
			"\tname                = $name",
			"\tgateway_id          = $gateway_id",
			"\tgateway_ip          = $gateway_ip",
			"\tcustomer_gateway_id = $customer_gateway_id",
			"\tpeer_subnets        = [$cidr_peer_subnet]",
			"\tvpn_type            = local.enum_vpn.connection_type.Policy-Based",
			"\tpsk                 = \"$psk\"",
			"",
			"\tpolicy_rules {",
			"\t\tsource      = $cidr_source",
			"\t\tdestination = [$cidr_destination]",
			"}",
			"",
			"\tikepolicy {",
			"\t\tauthentication_algorithm = local.enum_vpn.authentication_algorithm.sha2-256",
			"\t\tauthentication_method    = local.enum_vpn.authentication_method.pre-share",
			"\t\tencryption_algorithm     = local.enum_vpn.encryption_algorithm.aes-128",
			"\t\tike_version              = local.enum_vpn.ike_version.v2",
			"\t\tlifetime_seconds         = 86400",
			"\t\tdh_group                 = local.enum_vpn.dh_group.group15",
			"\t}",
			"",
			"\tipsecpolicy {",
			"\t\tauthentication_algorithm = local.enum_vpn.authentication_algorithm.sha2-256",
			"\t\tencapsulation_mode       = local.enum_vpn.encapsulation_mode.tunnel",
			"\t\tencryption_algorithm     = local.enum_vpn.encryption_algorithm.aes-128",
			"\t\tlifetime_seconds         = 3600",
			"\t\tpfs                      = local.enum_vpn.pfs.group14",
			"\t\ttransform_protocol       = local.enum_vpn.transform_protocol.esp",
			"\t}",
			"}",
		]
	}
}